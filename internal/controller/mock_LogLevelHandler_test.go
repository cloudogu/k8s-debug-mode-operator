// Code generated by mockery v2.53.3. DO NOT EDIT.

package controller

import (
	context "context"

	loglevel "github.com/cloudogu/k8s-debug-mode-operator/internal/loglevel"
	mock "github.com/stretchr/testify/mock"
)

// MockLogLevelHandler is an autogenerated mock type for the LogLevelHandler type
type MockLogLevelHandler struct {
	mock.Mock
}

type MockLogLevelHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogLevelHandler) EXPECT() *MockLogLevelHandler_Expecter {
	return &MockLogLevelHandler_Expecter{mock: &_m.Mock}
}

// GetLogLevel provides a mock function with given fields: ctx, element
func (_m *MockLogLevelHandler) GetLogLevel(ctx context.Context, element interface{}) (loglevel.LogLevel, error) {
	ret := _m.Called(ctx, element)

	if len(ret) == 0 {
		panic("no return value specified for GetLogLevel")
	}

	var r0 loglevel.LogLevel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (loglevel.LogLevel, error)); ok {
		return rf(ctx, element)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) loglevel.LogLevel); ok {
		r0 = rf(ctx, element)
	} else {
		r0 = ret.Get(0).(loglevel.LogLevel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, element)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogLevelHandler_GetLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogLevel'
type MockLogLevelHandler_GetLogLevel_Call struct {
	*mock.Call
}

// GetLogLevel is a helper method to define mock.On call
//   - ctx context.Context
//   - element interface{}
func (_e *MockLogLevelHandler_Expecter) GetLogLevel(ctx interface{}, element interface{}) *MockLogLevelHandler_GetLogLevel_Call {
	return &MockLogLevelHandler_GetLogLevel_Call{Call: _e.mock.On("GetLogLevel", ctx, element)}
}

func (_c *MockLogLevelHandler_GetLogLevel_Call) Run(run func(ctx context.Context, element interface{})) *MockLogLevelHandler_GetLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockLogLevelHandler_GetLogLevel_Call) Return(_a0 loglevel.LogLevel, _a1 error) *MockLogLevelHandler_GetLogLevel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogLevelHandler_GetLogLevel_Call) RunAndReturn(run func(context.Context, interface{}) (loglevel.LogLevel, error)) *MockLogLevelHandler_GetLogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// Kind provides a mock function with no fields
func (_m *MockLogLevelHandler) Kind() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Kind")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLogLevelHandler_Kind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kind'
type MockLogLevelHandler_Kind_Call struct {
	*mock.Call
}

// Kind is a helper method to define mock.On call
func (_e *MockLogLevelHandler_Expecter) Kind() *MockLogLevelHandler_Kind_Call {
	return &MockLogLevelHandler_Kind_Call{Call: _e.mock.On("Kind")}
}

func (_c *MockLogLevelHandler_Kind_Call) Run(run func()) *MockLogLevelHandler_Kind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogLevelHandler_Kind_Call) Return(_a0 string) *MockLogLevelHandler_Kind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogLevelHandler_Kind_Call) RunAndReturn(run func() string) *MockLogLevelHandler_Kind_Call {
	_c.Call.Return(run)
	return _c
}

// Restart provides a mock function with given fields: ctx, name
func (_m *MockLogLevelHandler) Restart(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogLevelHandler_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type MockLogLevelHandler_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockLogLevelHandler_Expecter) Restart(ctx interface{}, name interface{}) *MockLogLevelHandler_Restart_Call {
	return &MockLogLevelHandler_Restart_Call{Call: _e.mock.On("Restart", ctx, name)}
}

func (_c *MockLogLevelHandler_Restart_Call) Run(run func(ctx context.Context, name string)) *MockLogLevelHandler_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLogLevelHandler_Restart_Call) Return(_a0 error) *MockLogLevelHandler_Restart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogLevelHandler_Restart_Call) RunAndReturn(run func(context.Context, string) error) *MockLogLevelHandler_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogLevel provides a mock function with given fields: ctx, element, targetLogLevel
func (_m *MockLogLevelHandler) SetLogLevel(ctx context.Context, element interface{}, targetLogLevel loglevel.LogLevel) error {
	ret := _m.Called(ctx, element, targetLogLevel)

	if len(ret) == 0 {
		panic("no return value specified for SetLogLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, loglevel.LogLevel) error); ok {
		r0 = rf(ctx, element, targetLogLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogLevelHandler_SetLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogLevel'
type MockLogLevelHandler_SetLogLevel_Call struct {
	*mock.Call
}

// SetLogLevel is a helper method to define mock.On call
//   - ctx context.Context
//   - element interface{}
//   - targetLogLevel loglevel.LogLevel
func (_e *MockLogLevelHandler_Expecter) SetLogLevel(ctx interface{}, element interface{}, targetLogLevel interface{}) *MockLogLevelHandler_SetLogLevel_Call {
	return &MockLogLevelHandler_SetLogLevel_Call{Call: _e.mock.On("SetLogLevel", ctx, element, targetLogLevel)}
}

func (_c *MockLogLevelHandler_SetLogLevel_Call) Run(run func(ctx context.Context, element interface{}, targetLogLevel loglevel.LogLevel)) *MockLogLevelHandler_SetLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(loglevel.LogLevel))
	})
	return _c
}

func (_c *MockLogLevelHandler_SetLogLevel_Call) Return(_a0 error) *MockLogLevelHandler_SetLogLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogLevelHandler_SetLogLevel_Call) RunAndReturn(run func(context.Context, interface{}, loglevel.LogLevel) error) *MockLogLevelHandler_SetLogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogLevelHandler creates a new instance of MockLogLevelHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogLevelHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogLevelHandler {
	mock := &MockLogLevelHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
