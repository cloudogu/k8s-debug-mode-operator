// Code generated by mockery v2.53.3. DO NOT EDIT.

package controller

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	types "k8s.io/apimachinery/pkg/types"

	v1 "github.com/cloudogu/k8s-debug-mode-cr-lib/api/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// mockDebugModeInterface is an autogenerated mock type for the debugModeInterface type
type mockDebugModeInterface struct {
	mock.Mock
}

type mockDebugModeInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDebugModeInterface) EXPECT() *mockDebugModeInterface_Expecter {
	return &mockDebugModeInterface_Expecter{mock: &_m.Mock}
}

// AddFinalizer provides a mock function with given fields: ctx, debugMode, finalizer
func (_m *mockDebugModeInterface) AddFinalizer(ctx context.Context, debugMode *v1.DebugMode, finalizer string) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode, finalizer)

	if len(ret) == 0 {
		panic("no return value specified for AddFinalizer")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, string) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode, finalizer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, string) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode, finalizer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode, string) error); ok {
		r1 = rf(ctx, debugMode, finalizer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_AddFinalizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFinalizer'
type mockDebugModeInterface_AddFinalizer_Call struct {
	*mock.Call
}

// AddFinalizer is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
//   - finalizer string
func (_e *mockDebugModeInterface_Expecter) AddFinalizer(ctx interface{}, debugMode interface{}, finalizer interface{}) *mockDebugModeInterface_AddFinalizer_Call {
	return &mockDebugModeInterface_AddFinalizer_Call{Call: _e.mock.On("AddFinalizer", ctx, debugMode, finalizer)}
}

func (_c *mockDebugModeInterface_AddFinalizer_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode, finalizer string)) *mockDebugModeInterface_AddFinalizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode), args[2].(string))
	})
	return _c
}

func (_c *mockDebugModeInterface_AddFinalizer_Call) Return(_a0 *v1.DebugMode, _a1 error) *mockDebugModeInterface_AddFinalizer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDebugModeInterface_AddFinalizer_Call) RunAndReturn(run func(context.Context, *v1.DebugMode, string) (*v1.DebugMode, error)) *mockDebugModeInterface_AddFinalizer_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrUpdateLogLevelsSet provides a mock function with given fields: ctx, debugMode, set, msg, reason
func (_m *mockDebugModeInterface) AddOrUpdateLogLevelsSet(ctx context.Context, debugMode *v1.DebugMode, set bool, msg string, reason string) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode, set, msg, reason)

	if len(ret) == 0 {
		panic("no return value specified for AddOrUpdateLogLevelsSet")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, bool, string, string) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode, set, msg, reason)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, bool, string, string) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode, set, msg, reason)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode, bool, string, string) error); ok {
		r1 = rf(ctx, debugMode, set, msg, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrUpdateLogLevelsSet'
type mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call struct {
	*mock.Call
}

// AddOrUpdateLogLevelsSet is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
//   - set bool
//   - msg string
//   - reason string
func (_e *mockDebugModeInterface_Expecter) AddOrUpdateLogLevelsSet(ctx interface{}, debugMode interface{}, set interface{}, msg interface{}, reason interface{}) *mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call {
	return &mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call{Call: _e.mock.On("AddOrUpdateLogLevelsSet", ctx, debugMode, set, msg, reason)}
}

func (_c *mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode, set bool, msg string, reason string)) *mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode), args[2].(bool), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call) Return(_a0 *v1.DebugMode, _a1 error) *mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call) RunAndReturn(run func(context.Context, *v1.DebugMode, bool, string, string) (*v1.DebugMode, error)) *mockDebugModeInterface_AddOrUpdateLogLevelsSet_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, debugMode, opts
func (_m *mockDebugModeInterface) Create(ctx context.Context, debugMode *v1.DebugMode, opts metav1.CreateOptions) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, metav1.CreateOptions) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, metav1.CreateOptions) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode, metav1.CreateOptions) error); ok {
		r1 = rf(ctx, debugMode, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockDebugModeInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
//   - opts metav1.CreateOptions
func (_e *mockDebugModeInterface_Expecter) Create(ctx interface{}, debugMode interface{}, opts interface{}) *mockDebugModeInterface_Create_Call {
	return &mockDebugModeInterface_Create_Call{Call: _e.mock.On("Create", ctx, debugMode, opts)}
}

func (_c *mockDebugModeInterface_Create_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode, opts metav1.CreateOptions)) *mockDebugModeInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode), args[2].(metav1.CreateOptions))
	})
	return _c
}

func (_c *mockDebugModeInterface_Create_Call) Return(result *v1.DebugMode, err error) *mockDebugModeInterface_Create_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *mockDebugModeInterface_Create_Call) RunAndReturn(run func(context.Context, *v1.DebugMode, metav1.CreateOptions) (*v1.DebugMode, error)) *mockDebugModeInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name, opts
func (_m *mockDebugModeInterface) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDebugModeInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockDebugModeInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.DeleteOptions
func (_e *mockDebugModeInterface_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *mockDebugModeInterface_Delete_Call {
	return &mockDebugModeInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *mockDebugModeInterface_Delete_Call) Run(run func(ctx context.Context, name string, opts metav1.DeleteOptions)) *mockDebugModeInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.DeleteOptions))
	})
	return _c
}

func (_c *mockDebugModeInterface_Delete_Call) Return(_a0 error) *mockDebugModeInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDebugModeInterface_Delete_Call) RunAndReturn(run func(context.Context, string, metav1.DeleteOptions) error) *mockDebugModeInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *mockDebugModeInterface) Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) (*v1.DebugMode, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) *v1.DebugMode); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, metav1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockDebugModeInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.GetOptions
func (_e *mockDebugModeInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *mockDebugModeInterface_Get_Call {
	return &mockDebugModeInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *mockDebugModeInterface_Get_Call) Run(run func(ctx context.Context, name string, opts metav1.GetOptions)) *mockDebugModeInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.GetOptions))
	})
	return _c
}

func (_c *mockDebugModeInterface_Get_Call) Return(result *v1.DebugMode, err error) *mockDebugModeInterface_Get_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *mockDebugModeInterface_Get_Call) RunAndReturn(run func(context.Context, string, metav1.GetOptions) (*v1.DebugMode, error)) *mockDebugModeInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, name, pt, data, opts, subresources
func (_m *mockDebugModeInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*v1.DebugMode, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*v1.DebugMode, error)); ok {
		return rf(ctx, name, pt, data, opts, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) *v1.DebugMode); ok {
		r0 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type mockDebugModeInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - opts metav1.PatchOptions
//   - subresources ...string
func (_e *mockDebugModeInterface_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, opts interface{}, subresources ...interface{}) *mockDebugModeInterface_Patch_Call {
	return &mockDebugModeInterface_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, opts}, subresources...)...)}
}

func (_c *mockDebugModeInterface_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string)) *mockDebugModeInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(types.PatchType), args[3].([]byte), args[4].(metav1.PatchOptions), variadicArgs...)
	})
	return _c
}

func (_c *mockDebugModeInterface_Patch_Call) Return(result *v1.DebugMode, err error) *mockDebugModeInterface_Patch_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *mockDebugModeInterface_Patch_Call) RunAndReturn(run func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*v1.DebugMode, error)) *mockDebugModeInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFinalizer provides a mock function with given fields: ctx, debugMode, finalizer
func (_m *mockDebugModeInterface) RemoveFinalizer(ctx context.Context, debugMode *v1.DebugMode, finalizer string) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode, finalizer)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFinalizer")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, string) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode, finalizer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, string) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode, finalizer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode, string) error); ok {
		r1 = rf(ctx, debugMode, finalizer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_RemoveFinalizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFinalizer'
type mockDebugModeInterface_RemoveFinalizer_Call struct {
	*mock.Call
}

// RemoveFinalizer is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
//   - finalizer string
func (_e *mockDebugModeInterface_Expecter) RemoveFinalizer(ctx interface{}, debugMode interface{}, finalizer interface{}) *mockDebugModeInterface_RemoveFinalizer_Call {
	return &mockDebugModeInterface_RemoveFinalizer_Call{Call: _e.mock.On("RemoveFinalizer", ctx, debugMode, finalizer)}
}

func (_c *mockDebugModeInterface_RemoveFinalizer_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode, finalizer string)) *mockDebugModeInterface_RemoveFinalizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode), args[2].(string))
	})
	return _c
}

func (_c *mockDebugModeInterface_RemoveFinalizer_Call) Return(_a0 *v1.DebugMode, _a1 error) *mockDebugModeInterface_RemoveFinalizer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDebugModeInterface_RemoveFinalizer_Call) RunAndReturn(run func(context.Context, *v1.DebugMode, string) (*v1.DebugMode, error)) *mockDebugModeInterface_RemoveFinalizer_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, debugMode, opts
func (_m *mockDebugModeInterface) Update(ctx context.Context, debugMode *v1.DebugMode, opts metav1.UpdateOptions) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, metav1.UpdateOptions) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, metav1.UpdateOptions) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, debugMode, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockDebugModeInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
//   - opts metav1.UpdateOptions
func (_e *mockDebugModeInterface_Expecter) Update(ctx interface{}, debugMode interface{}, opts interface{}) *mockDebugModeInterface_Update_Call {
	return &mockDebugModeInterface_Update_Call{Call: _e.mock.On("Update", ctx, debugMode, opts)}
}

func (_c *mockDebugModeInterface_Update_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode, opts metav1.UpdateOptions)) *mockDebugModeInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode), args[2].(metav1.UpdateOptions))
	})
	return _c
}

func (_c *mockDebugModeInterface_Update_Call) Return(result *v1.DebugMode, err error) *mockDebugModeInterface_Update_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *mockDebugModeInterface_Update_Call) RunAndReturn(run func(context.Context, *v1.DebugMode, metav1.UpdateOptions) (*v1.DebugMode, error)) *mockDebugModeInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, debugMode, opts
func (_m *mockDebugModeInterface) UpdateStatus(ctx context.Context, debugMode *v1.DebugMode, opts metav1.UpdateOptions) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode, opts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, metav1.UpdateOptions) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode, metav1.UpdateOptions) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, debugMode, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type mockDebugModeInterface_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
//   - opts metav1.UpdateOptions
func (_e *mockDebugModeInterface_Expecter) UpdateStatus(ctx interface{}, debugMode interface{}, opts interface{}) *mockDebugModeInterface_UpdateStatus_Call {
	return &mockDebugModeInterface_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, debugMode, opts)}
}

func (_c *mockDebugModeInterface_UpdateStatus_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode, opts metav1.UpdateOptions)) *mockDebugModeInterface_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode), args[2].(metav1.UpdateOptions))
	})
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatus_Call) Return(result *v1.DebugMode, err error) *mockDebugModeInterface_UpdateStatus_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatus_Call) RunAndReturn(run func(context.Context, *v1.DebugMode, metav1.UpdateOptions) (*v1.DebugMode, error)) *mockDebugModeInterface_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusCompleted provides a mock function with given fields: ctx, debugMode
func (_m *mockDebugModeInterface) UpdateStatusCompleted(ctx context.Context, debugMode *v1.DebugMode) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusCompleted")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode) error); ok {
		r1 = rf(ctx, debugMode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_UpdateStatusCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusCompleted'
type mockDebugModeInterface_UpdateStatusCompleted_Call struct {
	*mock.Call
}

// UpdateStatusCompleted is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
func (_e *mockDebugModeInterface_Expecter) UpdateStatusCompleted(ctx interface{}, debugMode interface{}) *mockDebugModeInterface_UpdateStatusCompleted_Call {
	return &mockDebugModeInterface_UpdateStatusCompleted_Call{Call: _e.mock.On("UpdateStatusCompleted", ctx, debugMode)}
}

func (_c *mockDebugModeInterface_UpdateStatusCompleted_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode)) *mockDebugModeInterface_UpdateStatusCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode))
	})
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusCompleted_Call) Return(_a0 *v1.DebugMode, _a1 error) *mockDebugModeInterface_UpdateStatusCompleted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusCompleted_Call) RunAndReturn(run func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)) *mockDebugModeInterface_UpdateStatusCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusDebugModeSet provides a mock function with given fields: ctx, debugMode
func (_m *mockDebugModeInterface) UpdateStatusDebugModeSet(ctx context.Context, debugMode *v1.DebugMode) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusDebugModeSet")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode) error); ok {
		r1 = rf(ctx, debugMode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_UpdateStatusDebugModeSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusDebugModeSet'
type mockDebugModeInterface_UpdateStatusDebugModeSet_Call struct {
	*mock.Call
}

// UpdateStatusDebugModeSet is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
func (_e *mockDebugModeInterface_Expecter) UpdateStatusDebugModeSet(ctx interface{}, debugMode interface{}) *mockDebugModeInterface_UpdateStatusDebugModeSet_Call {
	return &mockDebugModeInterface_UpdateStatusDebugModeSet_Call{Call: _e.mock.On("UpdateStatusDebugModeSet", ctx, debugMode)}
}

func (_c *mockDebugModeInterface_UpdateStatusDebugModeSet_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode)) *mockDebugModeInterface_UpdateStatusDebugModeSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode))
	})
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusDebugModeSet_Call) Return(_a0 *v1.DebugMode, _a1 error) *mockDebugModeInterface_UpdateStatusDebugModeSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusDebugModeSet_Call) RunAndReturn(run func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)) *mockDebugModeInterface_UpdateStatusDebugModeSet_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusFailed provides a mock function with given fields: ctx, debugMode
func (_m *mockDebugModeInterface) UpdateStatusFailed(ctx context.Context, debugMode *v1.DebugMode) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusFailed")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode) error); ok {
		r1 = rf(ctx, debugMode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_UpdateStatusFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusFailed'
type mockDebugModeInterface_UpdateStatusFailed_Call struct {
	*mock.Call
}

// UpdateStatusFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
func (_e *mockDebugModeInterface_Expecter) UpdateStatusFailed(ctx interface{}, debugMode interface{}) *mockDebugModeInterface_UpdateStatusFailed_Call {
	return &mockDebugModeInterface_UpdateStatusFailed_Call{Call: _e.mock.On("UpdateStatusFailed", ctx, debugMode)}
}

func (_c *mockDebugModeInterface_UpdateStatusFailed_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode)) *mockDebugModeInterface_UpdateStatusFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode))
	})
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusFailed_Call) Return(_a0 *v1.DebugMode, _a1 error) *mockDebugModeInterface_UpdateStatusFailed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusFailed_Call) RunAndReturn(run func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)) *mockDebugModeInterface_UpdateStatusFailed_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusRollback provides a mock function with given fields: ctx, debugMode
func (_m *mockDebugModeInterface) UpdateStatusRollback(ctx context.Context, debugMode *v1.DebugMode) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusRollback")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode) error); ok {
		r1 = rf(ctx, debugMode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_UpdateStatusRollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusRollback'
type mockDebugModeInterface_UpdateStatusRollback_Call struct {
	*mock.Call
}

// UpdateStatusRollback is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
func (_e *mockDebugModeInterface_Expecter) UpdateStatusRollback(ctx interface{}, debugMode interface{}) *mockDebugModeInterface_UpdateStatusRollback_Call {
	return &mockDebugModeInterface_UpdateStatusRollback_Call{Call: _e.mock.On("UpdateStatusRollback", ctx, debugMode)}
}

func (_c *mockDebugModeInterface_UpdateStatusRollback_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode)) *mockDebugModeInterface_UpdateStatusRollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode))
	})
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusRollback_Call) Return(_a0 *v1.DebugMode, _a1 error) *mockDebugModeInterface_UpdateStatusRollback_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusRollback_Call) RunAndReturn(run func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)) *mockDebugModeInterface_UpdateStatusRollback_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusWaitForRollback provides a mock function with given fields: ctx, debugMode
func (_m *mockDebugModeInterface) UpdateStatusWaitForRollback(ctx context.Context, debugMode *v1.DebugMode) (*v1.DebugMode, error) {
	ret := _m.Called(ctx, debugMode)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusWaitForRollback")
	}

	var r0 *v1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)); ok {
		return rf(ctx, debugMode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DebugMode) *v1.DebugMode); ok {
		r0 = rf(ctx, debugMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DebugMode) error); ok {
		r1 = rf(ctx, debugMode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_UpdateStatusWaitForRollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusWaitForRollback'
type mockDebugModeInterface_UpdateStatusWaitForRollback_Call struct {
	*mock.Call
}

// UpdateStatusWaitForRollback is a helper method to define mock.On call
//   - ctx context.Context
//   - debugMode *v1.DebugMode
func (_e *mockDebugModeInterface_Expecter) UpdateStatusWaitForRollback(ctx interface{}, debugMode interface{}) *mockDebugModeInterface_UpdateStatusWaitForRollback_Call {
	return &mockDebugModeInterface_UpdateStatusWaitForRollback_Call{Call: _e.mock.On("UpdateStatusWaitForRollback", ctx, debugMode)}
}

func (_c *mockDebugModeInterface_UpdateStatusWaitForRollback_Call) Run(run func(ctx context.Context, debugMode *v1.DebugMode)) *mockDebugModeInterface_UpdateStatusWaitForRollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DebugMode))
	})
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusWaitForRollback_Call) Return(_a0 *v1.DebugMode, _a1 error) *mockDebugModeInterface_UpdateStatusWaitForRollback_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDebugModeInterface_UpdateStatusWaitForRollback_Call) RunAndReturn(run func(context.Context, *v1.DebugMode) (*v1.DebugMode, error)) *mockDebugModeInterface_UpdateStatusWaitForRollback_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *mockDebugModeInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (watch.Interface, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDebugModeInterface_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type mockDebugModeInterface_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.ListOptions
func (_e *mockDebugModeInterface_Expecter) Watch(ctx interface{}, opts interface{}) *mockDebugModeInterface_Watch_Call {
	return &mockDebugModeInterface_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *mockDebugModeInterface_Watch_Call) Run(run func(ctx context.Context, opts metav1.ListOptions)) *mockDebugModeInterface_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.ListOptions))
	})
	return _c
}

func (_c *mockDebugModeInterface_Watch_Call) Return(_a0 watch.Interface, _a1 error) *mockDebugModeInterface_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDebugModeInterface_Watch_Call) RunAndReturn(run func(context.Context, metav1.ListOptions) (watch.Interface, error)) *mockDebugModeInterface_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDebugModeInterface creates a new instance of mockDebugModeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDebugModeInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDebugModeInterface {
	mock := &mockDebugModeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
